<div class="container pt-3">

  <h3 class="py-3">Administration</h3>

  <p class="pb-2">
    Use this page to edit users, deploy contact flows and control access to rule sets.
  </p>

  <div class="text-center mb-3">
    {{#if administrator}}
      <button type="button" id="createUser" class="btn btn-success" onClick="createUserDialog();">Create user</button>

      <button type="button" id="systemHealth" class="btn btn-danger" onClick="refreshConnectCacheLocal();">Refresh cache</button>

      <button type="button" id="systemHealth" class="btn btn-primary" onClick="systemHealthDialog();">System health</button>
    {{/if}}

    <div class="dropdown" style="display: inline-flex; top: 2px;">
      <button class="btn btn-outline-secondary dropdown-toggle my-2" type="button" id="usersColumnDropDownButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Columns
      </button>
      <div class="dropdown-menu" aria-labelledby="usersColumnDropDownButton" id="usersColumnDropDown">
      </div>
    </div>
  </div>

  <table id="usersTable" class="display" width="100%" data-page-length="25">
    <thead>
      <tr>
          <th>User name</th>
          <th>Email</th>
          <th>Role</th>
          <th width="3%"></th>
          <th width="3%"></th>
          <th width="3%"></th>
      </tr>
    </thead>
    <tbody>
      {{#each users}}
        <tr>
          <td class="align-top">
            {{this.firstName}} {{this.lastName}}
          </td>
          <td class="align-top">
            {{this.emailAddress}}
          </td>
          <td class="align-top">
            {{this.userRole}}
          </td>
          <td class="dt-center align-top">
            {{#if this.enabled}}
              <i class="fas fa-check text-success" title="Enabled"></i>
            {{else}}
              <i class="fas fa-times text-muted" title="Disabled"></i>
            {{/if}}
          </td>
          <td class="dt-center align-top">
            <a href="javascript:editUserDialog('{{this.userId}}', '{{this.enabled}}', '{{this.emailAddress}}', '{{this.firstName}}', '{{this.lastName}}', '{{this.userRole}}');"><i class="fas fa-cog fa-lg text-primary" title="Configure"></i></a>
          </td>
          <td class="dt-center align-top">
            <a href="javascript:deleteUserDialog('{{this.userId}}', '{{this.emailAddress}}');"><i class="fas fa-times-circle fa-lg text-danger" title="Delete"></i></a>
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</div>

</div>

<!--
###########################################
# Users
###########################################
-->

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="createUserModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Create a user</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="createUserForm">
        <div class="modal-body">
          <div class="form-check pb-1">
            <input class="form-check-input" type="checkbox" checked id="userEnabled">
            <label class="form-check-label" for="userEnabled">
              Enable this user
            </label>
          </div>
          <div class="form-group">
            <label>First name *</label>
            <input type="text" class="form-control" id="firstName" maxLength="1024" minLength="1" placeholder="First name" required>
          </div>
          <div class="form-group">
            <label>Last name *</label>
            <input type="text" class="form-control" id="lastName" maxLength="1024" minLength="1" placeholder="Last name" required>
          </div>
          <div class="form-group">
            <label>Email address *</label>
            <input type="text" class="form-control" id="emailAddress" maxLength="1024" minLength="5" placeholder="Email address" required>
          </div>
          <div class="form-group">
            <label>User role *</label>
            <select class="form-control" id="userRole" required>
              <option></option>
              <option>ADMINISTRATOR</option>
              <option>POWER_USER</option>
              <option>TESTER</option>
            </select>
          </div>
          <div class="form-group">
            <label>User API Key *</label>
            <input type="text" class="form-control" id="apiKey" maxLength="1024" minLength="36" placeholder="Name" value="" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Create user</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="editUserModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Edit a user</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="editUserForm">
        <input type="hidden" id="editUserId" value=""/>
        <div class="modal-body">
          <div class="form-check pb-1">
            <input class="form-check-input" type="checkbox" id="editUserEnabled">
            <label class="form-check-label" for="editUserEnabled">
              Enable this user
            </label>
          </div>
          <div class="form-group">
            <label>First name *</label>
            <input type="text" class="form-control" id="editFirstName" maxLength="1024" minLength="1" placeholder="First name" required>
          </div>
          <div class="form-group">
            <label>Last name *</label>
            <input type="text" class="form-control" id="editLastName" maxLength="1024" minLength="1" placeholder="Last name" required>
          </div>
          <div class="form-group">
            <label>Email address *</label>
            <input type="text" class="form-control" id="editEmailAddress" maxLength="1024" minLength="5" placeholder="Email address" required>
          </div>
          <div class="form-group">
            <label>User role *</label>
            <select class="form-control" id="editUserRole" required>
              <option></option>
              <option>ADMINISTRATOR</option>
              <option>POWER_USER</option>
              <option>TESTER</option>
            </select>
          </div>
          <div class="form-group">
            <label>User API Key</label>
            <div class="row">
              <div class="col-9">
                <input type="text" class="form-control" id="editApiKey" maxLength="1024" minLength="36" placeholder="API key" value="">
              </div>
              <div class="col-3 text-center">
                <button type="button" class="btn btn-outline-danger" onClick="resetAPIKey()">Reset API Key</button>
              </div>
            </div>
            <small>Leave blank to keep the same API key, update to reset the API key</small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Update user</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="deleteUserModal">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Delete user</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="deleteUserForm">
        <input type="hidden" id="userToDelete" value=""/>

        <div class="modal-body">
          <div class="form-group">
            <p>Are you sure you want to delete the user: <span id="userToDeleteEmailAddress">Unknown</span>?</p>
            <p>
              This cannot be undone!
            </p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-danger">Delete user</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

<!--
###########################################
# System health
###########################################
-->

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="systemHealthModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Checking system health</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="systemHealthForm">
        <div class="modal-body">
          <div id="systemHealthResults">
            <div class="text-center"><img src="img/loading.gif" class="img-fluid" alt="Loading..."></div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

<script>

  var usersTable = undefined;

  $(document).ready(function ()
  {
    var columnConfig = getUsersColumnConfig();

    usersTable = $('#usersTable').DataTable(
    {
      language: {
        emptyTable: 'No users are currently configured'
      },
      order: [[ 0, "asc" ]],
      columns: [
        {
          orderable: true,
          visible: columnConfig[0]
        },
        {
          orderable: true,
          visible: columnConfig[1]
        },
        {
          orderable: true,
          visible: columnConfig[2]
        },
        {
          orderable: false,
          visible: columnConfig[3]
        },
        {
          orderable: false,
          visible: columnConfig[4]
        },
        {
          orderable: false,
          visible: columnConfig[5]
        }
      ]
    });

    renderUsersColumnDropDown();
  });

  function createUserDialog()
  {
    $('#apiKey').val(uuidv4());
    $('#createUserModal').modal();
  }

  $('#createUserForm').submit(async function(e)
  {
    e.preventDefault();

    var firstName = $('#firstName').val().trim();
    var lastName = $('#lastName').val().trim();
    var emailAddress = $('#emailAddress').val().trim();
    var userRole = $('#userRole').val().trim();
    var userEnabled = $('#userEnabled').is(':checked');
    var apiKey = $('#apiKey').val().trim();

    if (await createUser(firstName, lastName, emailAddress, userRole, apiKey, userEnabled))
    {
      $('#createUserModal').modal('hide');
      window.location.hash = '#admin';
      window.location.reload();
    }
  });

  function deleteUserDialog(userId, emailAddress)
  {
    $('#userToDelete').val(userId);
    $('#userToDeleteEmailAddress').html(emailAddress);
    $('#deleteUserModal').modal();
  }

  $('#deleteUserForm').submit(async function(e)
  {
    e.preventDefault();

    var userId = $('#userToDelete').val();

    if (await deleteObject('user', userId))
    {
      $('#deleteUserModal').modal('hide');
      successToast('User deleted successfully!');
      await sleep(500);
      window.location.hash = '#admin';
      window.location.reload();
    }
    else
    {
      $('#deleteUserModal').modal('hide');
    }
  });

  function editUserDialog(userId, enabled, emailAddress, firstName, lastName, userRole)
  {
    $('#editUserId').val(userId);

    if (enabled === 'true')
    {
      $('#editUserEnabled').attr('checked', 'checked');
    }
    else
    {
      $('#editUserEnabled').removeAttr('checked');
    }

    $('#editFirstName').val(firstName);
    $('#editLastName').val(lastName);
    $('#editEmailAddress').val(emailAddress);
    $('#editUserRole').val(userRole);
    $('#editApiKey').val('');

    $('#editUserModal').modal();
  }

  function resetAPIKey()
  {
    $('#editApiKey').val(uuidv4());
  }

  $('#editUserForm').submit(async function(e)
  {
    e.preventDefault();

    var userId = $('#editUserId').val();
    var firstName = $('#editFirstName').val().trim();
    var lastName = $('#editLastName').val().trim();
    var emailAddress = $('#editEmailAddress').val().trim();
    var userRole = $('#editUserRole').val().trim();
    var userEnabled = $('#editUserEnabled').is(':checked');
    var apiKey = $('#editApiKey').val().trim();

    if (await updateUser(userId, firstName, lastName, emailAddress, userRole, apiKey, userEnabled))
    {
      $('#editUserModal').modal('hide');
      successToast('User updated successfully!');
      await sleep(500);
      window.location.hash = '#admin';
      window.location.reload();
    }
  });

  var cachedSystemHealth = null;

  async function systemHealthDialog()
  {
    $('#systemHealthResults').html('<div class="text-center"><img src="img/loading.gif" class="img-fluid" alt="Loading..."></div>');

    $('#systemHealthModal').modal();

    try
    {
      // Force a cache refresh before loading system health
      await refreshConnectCacheLocal();
      cachedSystemHealth = await getSystemHealth();
      renderSystemHealth(cachedSystemHealth);
      successToast('System health loaded');
    }
    catch (error)
    {
      logError('Failed to load system health', error);
      $('#systemHealthResults').html('<div class="text-center text-danger py-5">An error occurred loading system health</div>');
    }
  }

  /**
   * Forces a refresh of the connect data cache
   */
  async function refreshConnectCacheLocal()
  {
    var lastChange = await getLastChangeTimestamp();

    if (await refreshConnectCache())
    {
      successToast('Connect cache is refreshing...');
    }
    else
    {
      errorToast('Failed to initiate cache refresh!');
      return;
    }

    var nextTimestamp = await getLastChangeTimestamp();

    var maxRetries = 36;
    var retry = 0;

    while ((nextTimestamp === lastChange) && (retry < maxRetries))
    {
      await sleep(5000);
      successToast('Connect cache is refreshing...');
      nextTimestamp = await getLastChangeTimestamp();
      retry++;
    }

    if (nextTimestamp !== lastChange)
    {
      console.log('Connect cache refreshed!');
      stickySuccessToast('Connect cache refreshed!');
    }
    else
    {
      console.error('Connect cache refreshed failed, check server logs');
      errorToast('Connect cache failed, check server logs');
    }
  }

  function renderSystemHealth(systemHealth)
  {
    var html = '';

    if (systemHealth.status === 'UNHEALTHY')
    {
      html += `<div class="py-2 text-center"><h4><i class="fas fa-exclamation-circle fa-lg text-danger"></i> System status: ${systemHealth.status}!</h4></div>`;
      html += `<div class="text-center py-2"><button class="btn btn-danger" onclick="repairEnvironment(cachedSystemHealth); return false;">Repair environment</button></h5></div>`;
    }
    else
    {
      html += `<div class="text-center py-2"><h4><i class="fas fa-check-circle fa-lg text-success"></i> System status: ${systemHealth.status}</h4></div>`;
    }

    html += `<div class="text-center py-2"><h5>Contact flows - ${systemHealth.contactFlows.status}</h5></div>`;

    systemHealth.contactFlows.contactFlows.forEach(contactFlow => {
      html += '<div class="row"><div class="col-2 text-right">';

      if (contactFlow.status !== 'HEALTHY')
      {
        html += '<i class="fas fa-exclamation-circle fa-lg text-danger"></i>';
      }
      else
      {
        html += '<i class="fas fa-check-circle fa-lg text-success"></i>';
      }

      html += '</div>';

      html += '<div class="col-6">';
      html += contactFlow.name;
      html += '</div>';

      html += '<div class="col-4">';
      html += contactFlow.status;
      html += '</div>';
      html += '</div>';
    });

    $('#systemHealthResults').html(html);
  }

  /**
   * Repairs system status by creating missing contact flows
   * then updating contact flow contents
   */
  async function repairEnvironment(systemHealth)
  {
    try
    {
      setupRenderRepairStatus();

      var options = {
        headers: {
          'x-api-key': unstore('api-key')
        }
      };

      var contactFlowCount = systemHealth.contactFlows.contactFlows.length;

      var totalSteps = 2 * contactFlowCount;
      var step = 1;

      // Ensure that contact flow are created
      for (var i = 0; i < contactFlowCount; i++)
      {
        var complete = step / totalSteps;
        var percent = Math.floor(complete * 100.0);
        renderRepairStatus(`Repairing contact flow: ${i + 1} of ${contactFlowCount} - ${percent}%<br>`
          + `(${systemHealth.contactFlows.contactFlows[i].name})`, complete);
        var result = await createContactFlow(systemHealth.contactFlows.contactFlows[i]);

        if (result.created)
        {
          systemHealth.contactFlows.contactFlows[i].id = result.id;
          systemHealth.contactFlows.contactFlows[i].arn = result.arn;
          systemHealth.contactFlows.contactFlows[i].status = 'UNHEALTHY';
          console.log('[INFO] created contact flow ready for updating: ' + JSON.stringify(systemHealth.contactFlows.contactFlows[i], null, 2));
        }

        await sleep(200);
        step++;
      }

      // Force a cache refresh
      await refreshConnectCacheLocal();

      // Ensure that all contact flow contents are up to date
      for (var i = 0; i < contactFlowCount; i++)
      {
        var complete = step / totalSteps;
        var percent = Math.floor(complete * 100.0);
        renderRepairStatus(`Updating contact flow: ${i + 1} of ${contactFlowCount} - ${percent}%<br>`
          + `(${systemHealth.contactFlows.contactFlows[i].name})`, complete);
        await updateContactFlow(systemHealth.contactFlows.contactFlows[i]);
        await sleep(200);
        step++;
      }

      renderRepairStatus('System repair is complete', 1);
    }
    catch (error)
    {
      logError('[ERROR] Failed to repair environment', error);
      renderFailure(error);
      errorToast('Failed to repair contact environment!');
      throw error;
    }
  }

  function setupRenderRepairStatus()
  {
    var html = '<div class="text-center pt-5">' +
    `<img src="img/progress_green.png" width="0%" height="8" id="repairDoneImage"><img src="img/progress_grey.png" width="100%" height="8" id="repairPendingImage">` +
    `<div class="pt-2" id="repairStatusMessage"></div>` +
    `<div class="pt-2" id="repairErrorMessage"></div>` +
    '</div>';

    $('#systemHealthResults').html(html);
  }

  function renderRepairStatus(message, progress)
  {
    var doneProgress = Math.floor(progress * 100.0);
    var remainingProgress = 100 - doneProgress;

    $('#repairDoneImage').width(doneProgress + '%');
    $('#repairPendingImage').width(remainingProgress + '%');
    $('#repairStatusMessage').html(message);
  }

  function renderFailure(error)
  {
    $('#repairDoneImage').attr("src", 'img/progress_red.png');

    if (error.response != undefined && error.response.data != undefined &&
      error.response.data.error != undefined)
    {
      $('#repairErrorMessage').html('ERROR: ' + error.response.data.error);
    }
    else
    {
      $('#repairErrorMessage').html('ERROR: ' + JSON.stringify(error, null, 2));
    }
  }

  function renderUsersColumnDropDown()
  {
    var columnData = getUsersColumnConfig();

    var columnNames = [
      'User name',
      'Email',
      'Role',
      'Enabled',
      'Configure',
      'Delete'
    ];

    var columnIndices = [
      0,
      1,
      2,
      3,
      4,
      5
    ];

    if (columnNames.length !== columnIndices.length)
    {
      alert('Incorrect column configuration');
      return;
    }

    var html = '';

    for (var i = 0; i < columnIndices.length; i++)
    {
      html += `<a class="dropdown-item" style="cursor: pointer" onClick="toggleUsersColumn(${columnIndices[i]});"><i class=" ${columnData[columnIndices[i]] ? 'fas text-success fa-check mr-1' : 'mr-3'}"></i>${columnNames[i]}</a>`;
    }

    $('#usersColumnDropDown').html(html);
  }

  function toggleUsersColumn(index)
  {
    var columnData = getUsersColumnConfig();

    columnData[index] = !columnData[index];
    storeObject('usersColumns', columnData);

    var column = usersTable.column(index);
    column.visible(!column.visible());

    updateUsersTableColumns();
    renderUsersColumnDropDown();
  }

  function updateUsersTableColumns()
  {
    var columnData = getUsersColumnConfig();

    for (var i = 0; i < columnData.length; i++)
    {
      var column = usersTable.column(i);
      column.visible(columnData[i]);
    }
  }

  function getUsersColumnConfig()
  {
    if (isStored('usersColumns'))
    {
      return unstoreObject('usersColumns');
    }
    else
    {
      return [
        true,
        true,
        true,
        true,
        true,
        true
      ];
    }
  }

</script>
