<div class="container pt-3 pb-5">

  <h3 class="py-3">Rules Engine for Amazon Connect Help</h3>

  <p class="pb-2">
    Here you can find some of the most commonly asked questions about the Rules Engine for Amazon Connect along with some advanced user topics such as installation, enhancements, rule types, and integration.
  </p>

  <nav class="navbar navbar-expand-sm bg-light justify-content-center">
    <ul class="navbar-nav">
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-general');">General</a>
      </li>
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-install');">Installation</a>
      </li>
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-configuringrules');">Configuring rules</a>
      </li>
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-ruletypes');">Rule types</a>
      </li>
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-handlebars');">Handlebars functions</a>
      </li>
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-integrationfunctions');">Integration functions</a>
      </li>
      <li class="nav-item pr-2">
        <a class="nav-link help-contents-link" href="#help" onclick="return scrollPageTo('nav-lexintegration');">Lex Integration</a>
      </li>
    </ul>
  </nav>


  <h4 class="my-3" id="nav-general">General</h4>

  <p>Get answers to some of the basic questions about the Rules Engine for Amazon Connect</p>

  <button class="accordion rounded border mb-3">What is Rules Engine for Amazon Connect?</button>
  <div class="panel">
    <p>
      Rules Engine for Amazon Connect is a rule based, attribute routing solution built for Amazon Connect. It allows a business or technical user to create custoemr experiences, add personalizations, and make decisions on the fly (considering customer attributes) using an easy to use interface outside of the AWS console.
    </p>

    <p>
      It uses the Amazon Connect Public API to make changes behind the scenes and comes CICD ready
      with the tools you need to support the most complex Amazon Connect deployments accross multiple environments.
    </p>

    <div class="text-center p-4">
      <img class="img-fluid" src="/img/help/rules_engine_architecture.png" title="Rules Engine Architecture">
    </div>

  </div>

  <button class="accordion rounded border mb-3">Who created RulesEngine?</button>
  <div class="panel">
    <p>RulesEngine is created and maintained by the specialist team of Amazon Connect Solution Architects from Australia.</p>
  </div>

  <button class="accordion rounded border mb-3">Why do we need RulesEngine?</button>
  <div class="panel">
    <p>
      RulesEngine provides an interface that allows a regular business user, such as a business analyst, develop rich IVR and NLU based customer experiences without the need to access the Amazon Connect console.
    </p>
    <p>
      It provides re-usable components called Rules, which you can use to assemble rich experiences
      for your customers. Because Rules are stable and shared between environments, using Rules
      Engine you can easily port changes between environments and verify your experiences with built in testing capabilties.
    </p>

    <p>
      Review the AWS ASEAN Summit 2022 presentation slides "Attribute based contact routing in the hands of the business":

      <div class="text-center p-4">
        <a href="/docs/INS207_Attribute_Routing.pdf"><img class="img-fluid" src="/docs/INS207_Attribute_Routing.png" title="Attribute based contact routing in the hands of the business"></a>
    </div>
  </div>

  <button class="accordion rounded border mb-3">Where can I get the source for Rules Engine?</button>
  <div class="panel">
    <p>Rules Engine is available as open source software (Apache-2.0) on GitHub:
      <a href="https://github.com/aws-samples/amazon-connect-rules-engine">https://github.com/aws-samples/amazon-connect-rules-engine</a></p>
  </div>

  <button class="accordion rounded border mb-3">What do I do if I find a bug or need an enhancement?</button>
  <div class="panel">
    <p>
      Rules Engine is open source, you can either implement the fix or enhancement yourself and raise a pull request on the GitHub repository (if you wish to contibute this to the community), or you can verify the issue isn't already reported or fixed and then <a href="https://github.com/aws-samples/amazon-connect-rules-engine/issues">raise a new issue on GitHub</a>.
    </p>
  </div>

  <h4 class="py-1 mt-3" id="nav-install">Installation</h4>

  <p>
    This section details how to deploy Rules Engine into your own AWS account and get started quickly.
  </p>

  <button class="accordion rounded border mb-3">How can I install in my own AWS account?</button>
  <div class="panel">
    <p>
      For installation of RulesEngine in your own AWS account you can follow the installation video:
    </p>
    <div class="w-100 text-center my-2">
      <iframe width="880" height="450" src="https://www.youtube.com/embed/NRaSKoVpdPY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
    <p>
      You can also read through the <a href="https://github.com/aws-samples/amazon-connect-rules-engine/blob/main/README.md">README.md</a> file on our Github repository for the latest installation steps.
    </p>
  </div>

  <button class="accordion rounded border mb-3">How do I update Rules Engine once deployed?</button>
  <div class="panel">
    <p>To update Rules Engine from source, simply pull the latest changes from GitHub: <a href="https://github.com/aws-samples/amazon-connect-rules-engine">https://github.com/aws-samples/amazon-connect-rules-engine</a>
    </p>
    <p>Read the incoming changes in <a href="https://github.com/aws-samples/amazon-connect-rules-engine/blob/main/CHANGELOG.md">CHANGELOG.md</a> and redeploy using the script:</p>
    <p class="pl-3">./scripts/rules_engine_serverless_deploy.sh [env]</p>
  </div>

  <h4 class="py-1" id="nav-ruletypes">Configuring rules</h4>

  <p>
    Rules are the units of configuration within Rules Engine and live with a Rule Set, which is
    simply a collection of optionally weighted rules. The postion of a customer in a Rule Set is maintained for you, you just just need to consider the customer experience when configuring Rules.
  </p>

  <button class="accordion rounded border mb-3">Introduction to Rules Engine decision making and personalisation</button>
  <div class="panel">
    <p>
      Watch the following video for an introduction to Rules Engine decision making and personalisation:
    </p>

    <div class="w-100 text-center my-2">
      <iframe width="880" height="450" src="https://www.youtube.com/embed/0af2On6vtMk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
  </div>

  <h4 class="py-1" id="nav-ruletypes">Rule types</h4>

  <p>Rules represent actions that you can perform during a customer interaction, This section details each of the available rules, their purpose and design.</p>

  <button class="accordion rounded border mb-3">Distribution</button>
  <div class="panel">
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
  </div>

  <button class="accordion rounded border mb-3">DTMFInput</button>
  <div class="panel">
    <p>
      The DTMFInput rule type provides the ability to fetch numerical input from customers.
    </p>
    <p>
      It can be used to fetch a variety of validated input data types including: number, date of birth and credit card expiry dates. It relies on touchpad (DTMF) input from the customer.
    </p>
  </div>

  <button class="accordion rounded border mb-3">DTMFMenu</button>
  <div class="panel">
    <p>
      The DTMFMenu rule type provides the ability to provide DTMF backed menus for your customers.
    </p>
    <p>
      During configuration of the rule you specify an offer message and select rule sets for each valid input DTMF key.
    </p>
    <p>
      DTMFMenu is a terminal rule type, it will either send the customer to another rule set, go to an optional error rule or no input rule set on error, or will hang up.
    </p>
  </div>

  <button class="accordion rounded border mb-3" id="nav-ruletypes-integration">Integration</button>
  <div class="panel">
    <p>
      The Integration rule type provides the ability to invoke existing installed Integration Lambda functions. For more information on the architecture of the Integration system, please see the help section on <a href="#help" onclick="return scrollPageTo('nav-integrationfunctions');">Integration functions</a>.
    </p>
    <p>
      Integration functions provide a way for customers to extend Rules Engine functionality to invoke external systems. Common use cases include: loading customer data from external sources and making transactional changes in third party systems and on-premises systems (e.g. booking an appointment, fetching or updating order details or recording a customer interaction).
    </p>
    <p>
      The Integration rule takes a function payload which is itself a Handlebars template and will fail if the response is not returned with the specified timeout.
    </p>
    <p>
      Integration functions track their progress in blessed customer state fields and the result of an integration function may be checked by inspecting the outcome of the following state fields:
    </p>
    <p class="pr-2">
      IntegrationStatus: Contains one of [START | RUNNING | DONE | ERROR | TIMEOUT]<br>
      IntegrationErrorCause: On error contains a technical error message
    </p>
    <p>
      Integration functions will usually export a JSON response object into the configured output state field and this may additionally contain a success flags which may be inspected if the
      IntegrationStatus is DONE.
    </p>
    <p>
      IntegrationStatus values of ERROR and TIMEOUT are reserved for hard failures and function timeouts respectively.
    </p>
    <p>
      After executing an Integration rule, subsequent rules may weight on IntergationStatus equal 'DONE' or notequal 'DONE' to confirm success or failure of the invoked function.
    </p>
  </div>

  <button class="accordion rounded border mb-3">Message</button>
  <div class="panel">
    <p>
      The Message rule type provides the ability to play voice messages to customers.
    </p>
    <p>
      It supports text, <a href="https://docs.aws.amazon.com/connect/latest/adminguide/supported-ssml-tags.html">SSML</a> and prompt inputs.
      Using SSML it is possible to add pauses and word emphasis for more realistic speech rendering.
    </p>
    <p>
      On creating the message, if you type 'prompt:' in the message field you will be shown a list of installed wav prompts that you may select to play. The text 'prompt:' must be the first characters in the message.
    </p>
    <p>
      The message input field supports rich Handlebars formatting options and had full access to the customer state for dynamic formatting. See the section on <a href="#help" onclick="return scrollPageTo('nav-handlebars');">Handlebars</a> below.
    </p>
    <p>
      You may prefix lines with the # character to denote a comment line.
    </p>
  </div>

  <button class="accordion rounded border mb-3">NLUInput</button>
  <div class="panel">
    <p>
      The NLUInput rule type provides the ability to fetch voice input from
      the customer and uses Amazon Lex bots as the input mechanism.
    </p>
    <p>
      It can be used to fetch a variety of validated input data types including: number, phone number, date and time. The selected data type determines the Lex bot that will be used
      to process customer voice input.
    </p>
    <p>
      It provides the ability to optionally auto confirm high confidence responses from customers and stores inputs into customer state under the configured output state key.
      On error NLUInput will either go to the configured error rule set or hang up if one is not specified.
      Retry counts and error messages are configurable.
    </p>
  </div>

  <button class="accordion rounded border mb-3">RuleSet</button>
  <div class="panel">
    <p>
      The RuleSet rule type provides the ability to change a customer to another rule set. If the optional 'Return here after this rule set is complete' option is ticked, control will be returned to the calling rule set once the new rule set runs out of rules.
    </p>
    <p>
      The optional message is played to the customer before transfer and supports the message formatting as per the Message rule type.
    </p>
  </div>

<h4 class="py-1 mt-3" id="nav-handlebars">Handlebars functions</h4>
<p>
  Rules Engine uses <a href="https://handlebarsjs.com/">Handlebars</a> to enhance formatting capabilities in
  numerous places, the most obvious being during message editing for rules. This section details common usage
  scenarios, existing helper functions and the process for adding new helper functions.
</p>

<button class="accordion rounded border mb-3">Handlebars introduction</button>
<div class="panel">
  <p>
    Handlebars is a <b>simple templating language</b>.
  </p>
  <p>
    Handlebar templates are useful for rendering values stored in the state.
    <br>
    For example, the state table is populated with the following key and value pairs:
  <pre><code>+-------------+-------------+
| State key   | State value |
+-------------+-------------+
| FirstName   | John        |
+-------------+-------------+
| LastName    | Doe         |
+-------------+-------------+
| PhoneNumber | 0412345678  |
+-------------+-------------+
| VIP         | true        |
+-------------+-------------+</code></pre>
  To render the <code>FirstName</code> and <code>LastName</code> values in a message, use the following handlebars
  templating language: <code> &#123;&#123;FirstName}} &#123;&#123;LastName}}</code>
  <br>
    <p>
      This will output <code>John Doe</code>.
    </p>
  </p>
</div>
<button class="accordion rounded border mb-3">Handlebars Helper Functions</button>
<div class="panel">
  <p>
    Helpers can be used to implement functionality that is not part of the Handlebars language itself.
    <br>
    This is useful when values need to be evaluted (to conditionally render a value), formatted or calculated.
    <br>
    The <a href="https://handlebarsjs.com/guide/builtin-helpers.html">handlebars documentation</a> includes built-in
    helper functions for use, the Rule Engine documentation also includes custom written helpers (listed in the next
    section).
  </p>
  <p>
    <b>Example 1 - Built-in Helper Function</b>

    <br>

    The handlebars documentation includes the <code>if</code> helper to conditionally render a block. For example, the following state table is populated with
    state key and value pairs:

  <pre><code>+-------------+-------------+
| State key   | State value |
+-------------+-------------+
| FirstName   | John        |
+-------------+-------------+
| LastName    | Doe         |
+-------------+-------------+
| PhoneNumber | 0412345678  |
+-------------+-------------+
| VIP         | true        |
+-------------+-------------+</code></pre>

    And in the <code>message</code> input, we only want the message
    <code>'As a VIP, you get early access to our flash sale!'</code> to render if the customer is a VIP member. So in
    the
    <code>message</code> input, we would have the following <code>if</code> helper function:
    <br>
    <pre><code>&#123;&#123;#if VIP}}
  As a VIP, you get early access to our flash sale!
&#123;&#123;/if}}</code></pre>
  </p>
  <p>
    <b>Example 2 - Custom Helper Function</b>
    <br>
    The Rules Engine documentation includes a custom function to generate a random number. This can be useful for
    generating one time codes.
    <br>
    For example, we want to generate a random number and store it in state. The <code>paddedRandom</code> custom function has the following syntax:
    <br><br>
    <code>paddedRandom &lt;min&gt; &lt;max&gt; &lt;length&gt;</code>
    <br><br>
    To following state table shows how to set the state value to invoke the <code>paddedRandom</code> function:
  <pre><code>+----------------------+----------------------------------+
| State key            | State value                      |
+----------------------+----------------------------------+
| Customer.OneTimeCode | &#123;&#123;paddedRandom 100000 999999 6}} |
+----------------------+----------------------------------+</code></pre>
  And to send the generated one time code as an SMS message, the <code>message</code> input will retrieve the one time
  code stored in state:
  <br><br>
  <pre><code>"Your one time code is &#123;&#123;Customer.OneTimeCode}}"
</code></pre>
  </p>
</div>

<button class="accordion rounded border mb-3">Existing helper functions</button>
<div class="panel">
  <p>
    The following Handlebars functions are available for message and parameter formatting:
  </p>
  <br>
  <p style="text-align:center">
    <b>Conditional Rendering Functions</b>
  </p>
  <hr>
  <div class="row">
    <div class="col-4">
      <b>Function definition</b>
    </div>
    <div class="col-8">
      <b>Description</b>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>ifeq &lt;val_1&gt; &lt;val_2&gt;</code>
    </div>
    <div class="col-8">
      Provides the ability to compare for equality against another value.
      <br>
      Returns <code>true</code> if val_1 equals val_2.

      <hr>
      <div class="mt-2">
        <b>Example</b>
        <br>
        The following prints <i>Happy Birthday</i> if today's date matches the customer birth date
        <hr>
        <pre><code>&#123;&#123;#ifeq Customer.LocalMonthDay Customer.DOBMonthDay}}
    By the way happy birthday!
&#123;&#123;/ifeq}}</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>includes &lt;val_1&gt; &lt;val_2&gt;</code>
    </div>
    <div class="col-8">
      Provides the ability to check inclusion in a string or array.
      <br>
      Returns <code>true</code> if val_1 includes val_2.

      <hr>
      <div class="mt-2">
        <b>Example</b>
        <br>
        The following prints <i>The list contains bananas</i> since <code>apples bananas</code> contains
        <code>bananas</code>
        <hr>
        <pre><code>&#123;&#123;#includes "apples bananas" "bananas"}}
    The string contains bananas
&#123;&#123;/includes}}</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>notempty &lt;val&gt;</code>
    </div>
    <div class="col-8">
      Determines if a given value is not empty.
      <br>
      Returns <code>true</code> if val_1 is not empty.

      <hr>
      <div class="mt-2">
        <b>Example</b>
        <br>
        The following prints <i>Customer name is not empty</i> if <code>Customer.Name</code> is mapped to a
        non-empty value
        <hr>
        <pre><code>&#123;&#123;#notempty Customer.Name}}
    Customer name is not empty
&#123;&#123;/notempty}}</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>empty &lt;val&gt;</code>
    </div>
    <div class="col-8">
      Determines if a given value is empty.
      <br>
      Returns <code>true</code> if val_1 is empty.

      <hr>
      <div class="mt-2">
        <b>Example</b>
        <br>
        The following prints <i>Customer name is empty</i> if <code>Customer.Name</code> is
        <code>undefined</code> or <code>empty</code>
        <hr>
        <pre><code>&#123;&#123;#empty Customer.Name}}
    Customer name is empty
&#123;&#123;/empty}}</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <br>
  <p style="text-align:center">
    <b>Formatting and Value Generating Functions</b>
  </p>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>paddedRandom &lt;min&gt; &lt;max&gt; &lt;length&gt;</code>
    </div>
    <div class="col-8">
      Generates a random number between the <code>&lt;min&gt;</code> and <code>&lt;max&gt;</code> value
      provided.
      <br>
      Returns the random number with the amount of digits specified in <code>&lt;length&gt;</code>.

      <hr>
      <div class="mt-2">
        <b>Example 1</b>
        <br>
        The following outputs and 8 digit number between 100000 and 999999
        <hr>
        <pre><code>&#123;&#123;paddedRandom 100000 999999 8}} // 00173025</code></pre>
        <hr>
        <b>Example 2</b>
        <br>
        The following outputs and 6 digit number between 100000 and 999999
        <hr>
        <pre><code>&#123;&#123;paddedRandom 100000 999999 6}} // 173025</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>upgradePhone &lt;phone_number&gt;</code>
    </div>
    <div class="col-8">
      Adds an international prefix to the <code>phone_number</code> that starts with 0

      <hr>
      <div class="mt-2">
        <b>Example</b>
        <br>
        The following adds the prefix to the phone number if it doesn't already exist and and strips out the 0 if present:
        <hr>
        <pre><code>&#123;&#123;upgradePhone "0412345678" "+61"}} // +61412345678</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>dateFormat &lt;date&gt; &lt;format&gt;</code>
    </div>
    <div class="col-8">
      Formats ISO-8601 UTC dates into any <a href="https://momentjs.com/docs/#/displaying/">Moment format</a>.
      <br>
      <hr>
      <div class="mt-2">
        <b>Examples</b>
        <hr>
  <pre><code>+----------------------+--------------------------+
| State key            | State value              |
+----------------------+--------------------------+
| Customer.DOB         | 1973-11-27               |
+----------------------+--------------------------+
| Customer.LastContact | 2022-11-27T23:20:00+0000 |
+----------------------+--------------------------+</code></pre>
        <pre><code>&#123;&#123;dateFormat Customer.DOB "YYYY"}} // 1973</code></pre>
        <pre><code>&#123;&#123;dateFormat Customer.DOB "MMMM"}} // November</code></pre>
        <pre><code>&#123;&#123;dateFormat Customer.DOB "Do [of] MMMM, YYYY"}} // 27th November, 1973</code></pre>
        <pre><code>&#123;&#123;dateFormat Customer.LastContact "MMMM, YYYY"}} // November, 2022</code></pre>
      </div>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-4">
      <code>dateFormatLocal &lt;date&gt; &lt;format&gt; &lt;timezone&gt;</code>
    </div>
    <div class="col-8">
      Formats ISO-8601 UTC dates into any <a href="https://momentjs.com/docs/#/displaying/">Moment format</a> in the requested <a href="https://momentjs.com/timezone/">Moment timezone</a> (<a href="https://gist.github.com/diogocapela/12c6617fc87607d11fd62d2a4f42b02a">all timezones</a>).
      <br>
      <hr>
      <div class="mt-2">
        <b>Examples</b>
        <hr>
  <pre><code>+-------------------------+--------------------------+
| State key               | State value              |
+-------------------------+--------------------------+
| Customer.PolicyEnd      | 2022-12-31T14:00:00+0000 |
+-------------------------+--------------------------+
| Customer.NextAppointent | 2022-12-04T23:00:00+0000 |
+-------------------------+--------------------------+</code></pre>
        <pre><code>&#123;&#123;dateFormatLocal Customer.PolicyEnd "Do [of] MMMM, YYYY" "Australia/Brisbane"}} // 1st of January, 2023</code></pre>
        <pre><code>&#123;&#123;dateFormatLocal Customer.NextAppointent "h:mma" "Australia/Brisbane"}} // 9:00am</code></pre>
        <pre><code>&#123;&#123;dateFormatLocal Customer.NextAppointent "Do [of] MMMM, YYYY [at] h:mma" "Australia/Brisbane"}} // 5th December, 2022 at 9:00am</code></pre>
      </div>
    </div>
  </div>

  <hr>
  <div class="row">
    <div class="col-4">
      <code>characterSpeechSlow &lt;val&gt;</code>
    </div>
    <div class="col-8">
      Splits an incoming string with commas resulting in Polly reading each character individually and slowly.
      <br>
      <hr>
      <div class="mt-2">
        <b>Example</b>
        <hr>
        <pre><code>+-------------+-------------+
| State key   | State value |
+-------------+-------------+
| PhoneNumber | 0412345678  |
+-------------+-------------+</code></pre>

<pre><code>&#123;&#123;characterSpeechSlow PhoneNumber}} // 0, 4, 2, 2, 5, 2, 9, 1, 2, 3.</code></pre>
        </div>
      </div>
    </div>
    <hr>
    <div class="row">
      <div class="col-4">
        <code>characterSpeechFast &lt;val&gt;</code>
      </div>
      <div class="col-8">
        Splits an incoming string with spaces resulting in Polly reading each character individually.
        <br>
        <hr>
        <div class="mt-2">
          <b>Example</b>
          <hr>
          <pre><code>+-----------+-------------+
| State key | State value |
+-----------+-------------+
| PostCode  | 4035        |
+-----------+-------------+</code></pre>

<pre><code>&#123;&#123;characterSpeechFast PostCode}} // 4 0 3 5</code></pre>
        </div>
      </div>
    </div>
    <hr>
    <div class="row">
      <div class="col-4">
        <code>formatCentsAsDollars &lt;val&gt;</code>
      </div>
      <div class="col-8">
        Formats a value stored in cents as dollars.
        <br>
        <hr>
        <div class="mt-2">
          <b>Example</b>
          <hr>
          <pre><code>&#123;&#123;formatCentsAsDollars "50"}} // $0.50</code></pre>
          <b>Example 2</b>
          <hr>
          <pre><code>&#123;&#123;formatCentsAsDollars 200}} // $2.00</code></pre>
        </div>
      </div>
    </div>
    <hr>
    <div class="row">
      <div class="col-4">
        <code>formatRinggit &lt;val&gt;</code>
      </div>
      <div class="col-8">
        Formats Malaysian Ringgit
        <br>
        <hr>
        <div class="mt-2">
          <b>Example</b>
          <hr>
          <pre><code>&#123;&#123;formatRinggit "100"}} // 100 ring-git</code></pre>
          <b>Example 2</b>
          <hr>
          <pre><code>&#123;&#123;formatRinggit 50.3}} // 50 ring-git, and 29 zen</code></pre>
        </div>
      </div>
    </div>
    <hr>
    <div class="row">
      <div class="col-4">
        <code>formatBalanceCentsAsDollars &lt;val&gt;</code>
      </div>
      <div class="col-8">
        Formats a balance cents amount as dollars handling credit cases
        <br>
        <hr>
        <div class="mt-2">
          <b>Example</b>
          <hr>
          <pre><code>&#123;&#123;formatBalanceCentsAsDollars "-100"}} // $1.00 in credit</code></pre>
          <b>Example 2</b>
          <hr>
          <pre><code>&#123;&#123;formatBalanceCentsAsDollars 100}} // $1.00</code></pre>
        </div>
      </div>
    </div>
  </div>

  <button class="accordion rounded border mb-3">Adding new helper functions</button>
  <div class="panel">
    <p>
      To add new helper functions register them in <a href="https://github.com/aws-samples/amazon-connect-rules-engine/blob/main/lambda/utils/HandlebarsUtils.js">lambda/utils/HandlebarsUtils.js</a> and redeploy the solution. Handlebars helper functions are validated at time of rule save.
    </p>
  </div>

  <h4 class="py-1 mt-3" id="nav-integrationfunctions">Integration functions</h4>

  <p>
    Rules Engine uses Integration functions exposed via the <a href="#help" onclick="return scrollPageTo('nav-ruletypes-integration');">Integration rule</a> to extend
    Rules Engine extend functonality to external systems.
  </p>

  <p>
    More details on the security considerations and process for implementing and configuring integration Lambda functions may be found in <a href="https://github.com/aws-samples/amazon-connect-rules-engine/blob/main/EXTENDING.md">EXTENDING.md</a>
  </p>

  <button class="accordion rounded border mb-3">Integration architecture diagram</button>
  <div class="panel">
    <div class="text-center p-4">
      <img class="img-fluid" src="/img/help/integration_architecture.png" title="Rules Engine Integration Architecture">
    </div>
  </div>

  <h4 class="py-1 mt-3" id="nav-lexintegration">Lex integration</h4>

  <p>
    Rules Engine uses Amazon Lex for intent and slot filling. This section shows you how to add, configure and deploy your own Lex bots to determine the intent of a customer's enquiry and route accordingly and how to obtain input from customers using voice.
  </p>

  <button class="accordion rounded border mb-3">Integrating Lex bots with Rules Engine</button>
  <div class="panel">

    <p>
      Learn how to add new Lex bots and access them from Rules Engine in the following video.
    </p>

    <div class="w-100 text-center my-2">
      <iframe width="880" height="450" src="https://www.youtube.com/embed/gVyGsK-N6oY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
  </div>

</div>
<script>
  $(document).ready(function ()
  {
    var acc = document.getElementsByClassName("accordion");
    var i;

    for (i = 0; i < acc.length; i++) {
      acc[i].addEventListener("click", function() {
        this.classList.toggle("hactive");
        var panel = this.nextElementSibling;
        if (panel.style.maxHeight) {
          panel.style.maxHeight = null;
        } else {
          panel.style.maxHeight = panel.scrollHeight + "px";
        }
      });
    }
  });

  function scrollPageTo(id)
  {
    document.getElementById(id).scrollIntoView({behavior: 'smooth'});
    return false;
  }
</script>
</div>
